package core.v;

import Jama.Matrix;
import core.c.DecisionsController;
import core.c.Main;
import core.c.ProfilesService;
import core.m.ComparisonMatrix;
import core.m.Criterion;
import core.m.Decision;
import core.m.Profile;
import core.m.exceptions.UserAuthenticationException;
import core.m.exceptions.UserRegistrationException;
import core.m.i.Element;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mateusz
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createProfileDialog = new javax.swing.JDialog();
        createUserDialogCancelButton = new javax.swing.JButton();
        createUserDialogOkButton = new javax.swing.JButton();
        createUserDialogUserNameField = new javax.swing.JTextField();
        createUserDialogUserNameLabel = new javax.swing.JLabel();
        loadProfileDialog = new javax.swing.JDialog();
        logInDialogCancelButton = new javax.swing.JButton();
        logInDialogOkButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        setCriterionsDialog = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        setCriterionsDialogCriterionsPanel = new javax.swing.JPanel();
        setCriterionsDialogCriterionPreferencePanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        setCriterionsDialogAddCriterionButton = new javax.swing.JButton();
        setCriterionsDialogCancelButton = new javax.swing.JButton();
        setCriterionsDialogOkButton = new javax.swing.JButton();
        setCriterionsDialogSetValuesButton = new javax.swing.JButton();
        logInOutMenuItem = new javax.swing.JMenuItem();
        jFileChooser1 = new javax.swing.JFileChooser();
        resultDialog = new javax.swing.JDialog();
        resultDialogInnerPanel = new javax.swing.JPanel();
        comparisonPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        leftImagePanel = new core.v.ImagePanel();
        rightImagePanel = new core.v.ImagePanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        calculateMenuItem = new javax.swing.JMenuItem();
        exitMenuOption = new javax.swing.JMenuItem();
        userMenu = new javax.swing.JMenu();
        createUserMenuItem = new javax.swing.JMenuItem();
        userMenuSeparator = new javax.swing.JPopupMenu.Separator();
        saveSessionMenuItem = new javax.swing.JMenuItem();
        loadSessionMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        setCriterionsMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        createProfileDialog.setLocationByPlatform(true);
        createProfileDialog.setMaximumSize(new java.awt.Dimension(325, 200));
        createProfileDialog.setMinimumSize(new java.awt.Dimension(325, 200));
        createProfileDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        createProfileDialog.setPreferredSize(new java.awt.Dimension(325, 200));
        createProfileDialog.setResizable(false);

        createUserDialogCancelButton.setText("Cancel");
        createUserDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserDialogCancelButtonActionPerformed(evt);
            }
        });

        createUserDialogOkButton.setText("Ok");
        createUserDialogOkButton.setMaximumSize(new java.awt.Dimension(65, 23));
        createUserDialogOkButton.setMinimumSize(new java.awt.Dimension(65, 23));
        createUserDialogOkButton.setPreferredSize(new java.awt.Dimension(65, 23));
        createUserDialogOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserDialogOkButtonActionPerformed(evt);
            }
        });

        createUserDialogUserNameLabel.setText("Profile name");

        javax.swing.GroupLayout createProfileDialogLayout = new javax.swing.GroupLayout(createProfileDialog.getContentPane());
        createProfileDialog.getContentPane().setLayout(createProfileDialogLayout);
        createProfileDialogLayout.setHorizontalGroup(
            createProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createProfileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createProfileDialogLayout.createSequentialGroup()
                        .addGap(0, 165, Short.MAX_VALUE)
                        .addComponent(createUserDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(createUserDialogCancelButton))
                    .addGroup(createProfileDialogLayout.createSequentialGroup()
                        .addComponent(createUserDialogUserNameLabel)
                        .addGap(65, 65, 65)
                        .addComponent(createUserDialogUserNameField)))
                .addContainerGap())
        );
        createProfileDialogLayout.setVerticalGroup(
            createProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createProfileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createUserDialogUserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createUserDialogUserNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addGroup(createProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createUserDialogCancelButton)
                    .addComponent(createUserDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        loadProfileDialog.setMinimumSize(new java.awt.Dimension(273, 300));
        loadProfileDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        loadProfileDialog.setPreferredSize(new java.awt.Dimension(160, 300));

        logInDialogCancelButton.setText("Cancel");
        logInDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInDialogCancelButtonActionPerformed(evt);
            }
        });

        logInDialogOkButton.setText("Ok");
        logInDialogOkButton.setMaximumSize(new java.awt.Dimension(65, 23));
        logInDialogOkButton.setMinimumSize(new java.awt.Dimension(65, 23));
        logInDialogOkButton.setPreferredSize(new java.awt.Dimension(65, 23));
        logInDialogOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInDialogOkButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select profile");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout loadProfileDialogLayout = new javax.swing.GroupLayout(loadProfileDialog.getContentPane());
        loadProfileDialog.getContentPane().setLayout(loadProfileDialogLayout);
        loadProfileDialogLayout.setHorizontalGroup(
            loadProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadProfileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loadProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadProfileDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(logInDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logInDialogCancelButton))
                    .addGroup(loadProfileDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        loadProfileDialogLayout.setVerticalGroup(
            loadProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadProfileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loadProfileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logInDialogCancelButton)
                    .addComponent(logInDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setCriterionsDialog.setMinimumSize(new java.awt.Dimension(705, 370));
        setCriterionsDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jPanel3.setLayout(new java.awt.BorderLayout(10, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setMaximumSize(new java.awt.Dimension(205, 32767));
        jPanel5.setMinimumSize(new java.awt.Dimension(205, 100));
        jPanel5.setName(""); // NOI18N
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(205, 200));

        setCriterionsDialogCriterionsPanel.setLayout(new javax.swing.BoxLayout(setCriterionsDialogCriterionsPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(setCriterionsDialogCriterionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setCriterionsDialogCriterionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(jPanel5, java.awt.BorderLayout.LINE_START);

        setCriterionsDialogCriterionPreferencePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setCriterionsDialogCriterionPreferencePanel.setLayout(new javax.swing.BoxLayout(setCriterionsDialogCriterionPreferencePanel, javax.swing.BoxLayout.Y_AXIS));
        jPanel3.add(setCriterionsDialogCriterionPreferencePanel, java.awt.BorderLayout.CENTER);

        jPanel7.setMaximumSize(new java.awt.Dimension(32767, 100));

        setCriterionsDialogAddCriterionButton.setText("Add");
        setCriterionsDialogAddCriterionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCriterionsDialogAddCriterionButtonActionPerformed(evt);
            }
        });

        setCriterionsDialogCancelButton.setText("Cancel");
        setCriterionsDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCriterionsDialogCancelButtonActionPerformed(evt);
            }
        });

        setCriterionsDialogOkButton.setText("Ok");
        setCriterionsDialogOkButton.setMaximumSize(new java.awt.Dimension(65, 23));
        setCriterionsDialogOkButton.setMinimumSize(new java.awt.Dimension(65, 23));
        setCriterionsDialogOkButton.setName(""); // NOI18N
        setCriterionsDialogOkButton.setPreferredSize(new java.awt.Dimension(65, 23));
        setCriterionsDialogOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCriterionsDialogOkButtonActionPerformed(evt);
            }
        });

        setCriterionsDialogSetValuesButton.setText("Set values");
        setCriterionsDialogSetValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCriterionsDialogSetValuesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(setCriterionsDialogAddCriterionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setCriterionsDialogSetValuesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 430, Short.MAX_VALUE)
                .addComponent(setCriterionsDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(setCriterionsDialogCancelButton)
                .addGap(2, 2, 2))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setCriterionsDialogAddCriterionButton)
                    .addComponent(setCriterionsDialogCancelButton)
                    .addComponent(setCriterionsDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setCriterionsDialogSetValuesButton))
                .addContainerGap())
        );

        jPanel3.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout setCriterionsDialogLayout = new javax.swing.GroupLayout(setCriterionsDialog.getContentPane());
        setCriterionsDialog.getContentPane().setLayout(setCriterionsDialogLayout);
        setCriterionsDialogLayout.setHorizontalGroup(
            setCriterionsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setCriterionsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        setCriterionsDialogLayout.setVerticalGroup(
            setCriterionsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setCriterionsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );

        logInOutMenuItem.setText("Log in");
        logInOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInOutMenuItemActionPerformed(evt);
            }
        });

        resultDialog.setMinimumSize(new java.awt.Dimension(400, 300));

        javax.swing.GroupLayout resultDialogLayout = new javax.swing.GroupLayout(resultDialog.getContentPane());
        resultDialog.getContentPane().setLayout(resultDialogLayout);
        resultDialogLayout.setHorizontalGroup(
            resultDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultDialogInnerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        resultDialogLayout.setVerticalGroup(
            resultDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultDialogInnerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comparisonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        comparisonPanel.setLayout(new javax.swing.BoxLayout(comparisonPanel, javax.swing.BoxLayout.Y_AXIS));

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.setEnabled(false);
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previousButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 776, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(previousButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout leftImagePanelLayout = new javax.swing.GroupLayout(leftImagePanel);
        leftImagePanel.setLayout(leftImagePanelLayout);
        leftImagePanelLayout.setHorizontalGroup(
            leftImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        leftImagePanelLayout.setVerticalGroup(
            leftImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout rightImagePanelLayout = new javax.swing.GroupLayout(rightImagePanel);
        rightImagePanel.setLayout(rightImagePanelLayout);
        rightImagePanelLayout.setHorizontalGroup(
            rightImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rightImagePanelLayout.setVerticalGroup(
            rightImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        fileMenu.setText("File");

        calculateMenuItem.setText("Calculate");
        calculateMenuItem.setEnabled(false);
        calculateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(calculateMenuItem);

        exitMenuOption.setText("Exit");
        exitMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuOption);

        menuBar.add(fileMenu);

        userMenu.setText("User");

        createUserMenuItem.setText("Create profile");
        createUserMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(createUserMenuItem);
        userMenu.add(userMenuSeparator);

        saveSessionMenuItem.setText("Save profile");
        saveSessionMenuItem.setEnabled(false);
        saveSessionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSessionMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(saveSessionMenuItem);

        loadSessionMenuItem.setText("Load profile");
        loadSessionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSessionMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(loadSessionMenuItem);

        menuBar.add(userMenu);

        optionsMenu.setText("Options");

        setCriterionsMenuItem.setText("Set criterions");
        setCriterionsMenuItem.setEnabled(false);
        setCriterionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCriterionsMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(setCriterionsMenuItem);

        jMenuItem1.setText("Change images folder");
        jMenuItem1.setEnabled(false);
        optionsMenu.add(jMenuItem1);

        menuBar.add(optionsMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comparisonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rightImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comparisonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                    .addComponent(leftImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createUserMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserMenuItemActionPerformed
        // TODO add your handling code here:
        createProfileDialog.setVisible(true);
    }//GEN-LAST:event_createUserMenuItemActionPerformed

    private void logInOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInOutMenuItemActionPerformed
    }//GEN-LAST:event_logInOutMenuItemActionPerformed

    private void logInDialogOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInDialogOkButtonActionPerformed

        ProfilesService.getInstance().loadProfile((String) jList1.getSelectedValue());
        setComparisonPairs();
        comparePair(0);
        previousButton.setEnabled(false);
        nextButton.setEnabled(true);
        this.revalidate();
        this.repaint();
        loadProfileDialog.dispose();
        saveSessionMenuItem.setEnabled(true);
        calculateMenuItem.setEnabled(true);
        setCriterionsMenuItem.setEnabled(true);
    }//GEN-LAST:event_logInDialogOkButtonActionPerformed

    private void logInDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInDialogCancelButtonActionPerformed
//        // TODO add your handling code here:
//        logInDialog.dispose();
//        logInDialogUserNameField.setText("");
//        logInDialogPasswordField.setText("");
        loadProfileDialog.dispose();
    }//GEN-LAST:event_logInDialogCancelButtonActionPerformed

    private void calculateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateMenuItemActionPerformed
        // TODO add your handling code here:
        resultDialogInnerPanel.removeAll();
        Criterion[] criterions = ProfilesService.getInstance().getCurrentProfile().getCriterions();

        for (int i = 0; i < criterions.length; ++i) {
            ProfilesService.getInstance().getCurrentProfile().setDecisionsPreferences(criterions[i], comparisonMatrixes[i]);
        }

        Matrix result = Main.calcUserChoice();

        double[] resultArray = result.getRowPackedCopy();

        double maxValue = 0;
        for (double value : resultArray) {
            maxValue = value > maxValue ? value : maxValue;
        }

        for (int i = 0; i < resultArray.length; ++i) {
            if (resultArray[i] == maxValue) {
                ImagePanel p = new ImagePanel();
                try {
                    p.setImage(ProfilesService.getInstance().getCurrentProfile().getDecisions()[i].getImage());
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                resultDialogInnerPanel.add(p);
            }
        }
        resultDialog.setVisible(true);
        resultDialog.repaint();
        resultDialog.revalidate();
    }//GEN-LAST:event_calculateMenuItemActionPerformed

    private void saveSessionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSessionMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            ProfilesService.getInstance().saveProfile();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveSessionMenuItemActionPerformed

    private void loadSessionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSessionMenuItemActionPerformed
        // TODO add your handling code here:
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = ProfilesService.getInstance().getProfilesNames();

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });

        jList1.setSelectedIndex(0);
        loadProfileDialog.setVisible(true);
    }//GEN-LAST:event_loadSessionMenuItemActionPerformed

    private void exitMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuOptionActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitMenuOptionActionPerformed

    private void setCriterionsDialogAddCriterionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCriterionsDialogAddCriterionButtonActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel();
        JTextField textField = new JTextField();
        JButton button = new JButton("x");

        panel.setMaximumSize(new java.awt.Dimension(200, 30));
        panel.setPreferredSize(new java.awt.Dimension(200, 30));
        panel.setMinimumSize(new java.awt.Dimension(200, 30));
        textField.setMaximumSize(new java.awt.Dimension(150, 23));
        textField.setPreferredSize(new java.awt.Dimension(150, 23));
        textField.setMinimumSize(new java.awt.Dimension(150, 23));
        button.setPreferredSize(new java.awt.Dimension(23, 23));
        button.setMaximumSize(new java.awt.Dimension(23, 23));
        button.setMinimumSize(new java.awt.Dimension(23, 23));
        button.setMargin(new Insets(2, 3, 2, 2));

        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setCriterionsDialogCriterionsPanel.remove(((JButton) e.getSource()).getParent());
                setCriterionsDialogCriterionsPanel.repaint();
                setCriterionsDialogCriterionsPanel.revalidate();
            }
        });

        panel.add(textField);
        panel.add(button);
        setCriterionsDialogCriterionsPanel.add(panel);
        setCriterionsDialogCriterionsPanel.repaint();
        setCriterionsDialogCriterionsPanel.revalidate();
    }//GEN-LAST:event_setCriterionsDialogAddCriterionButtonActionPerformed

    private void setCriterionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCriterionsMenuItemActionPerformed
        // TODO add your handling code here:JPanel panel = new JPanel();
        setCriterionsDialogCriterionsPanel.removeAll();
        setCriterionsDialogCriterionPreferencePanel.removeAll();

        for (Element e : ProfilesService.getInstance().getCurrentProfile().getCriterions()) {
            JPanel panel = new JPanel();
            JTextField textField = new JTextField(e.getName());
            JButton button = new JButton("x");

            panel.setMaximumSize(new java.awt.Dimension(200, 30));
            panel.setPreferredSize(new java.awt.Dimension(200, 30));
            panel.setMinimumSize(new java.awt.Dimension(200, 30));
            textField.setMaximumSize(new java.awt.Dimension(150, 23));
            textField.setPreferredSize(new java.awt.Dimension(150, 23));
            textField.setMinimumSize(new java.awt.Dimension(150, 23));
            button.setPreferredSize(new java.awt.Dimension(23, 23));
            button.setMaximumSize(new java.awt.Dimension(23, 23));
            button.setMinimumSize(new java.awt.Dimension(23, 23));
            button.setMargin(new Insets(2, 3, 2, 2));

            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    setCriterionsDialogCriterionsPanel.remove(((JButton) e.getSource()).getParent());
                    setCriterionsDialogCriterionsPanel.repaint();
                    setCriterionsDialogCriterionsPanel.revalidate();
                }
            });

            panel.add(textField);
            panel.add(button);
            setCriterionsDialogCriterionsPanel.add(panel);
            setCriterionsDialogCriterionsPanel.repaint();
            setCriterionsDialogCriterionsPanel.revalidate();
        }

        setCriterionsDialog.setVisible(true);
        setCriterionsDialogCancelButton.setEnabled(true);
    }//GEN-LAST:event_setCriterionsMenuItemActionPerformed

    private void setCriterionsDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCriterionsDialogCancelButtonActionPerformed
        // TODO add your handling code here:
        setCriterionsDialog.dispose();
    }//GEN-LAST:event_setCriterionsDialogCancelButtonActionPerformed

    private void setCriterionsDialogSetValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCriterionsDialogSetValuesButtonActionPerformed
        // TODO add your handling code here:
        setCriterionsDialogCancelButton.setEnabled(false);
        List<Criterion> criterions = new LinkedList<>();

        for (Component component : setCriterionsDialogCriterionsPanel.getComponents()) {
            JPanel panel = (JPanel) component;
            for (Component element : panel.getComponents()) {
                element.setEnabled(false);

                if (element instanceof JTextField) {
                    criterions.add(new Criterion(((JTextField) element).getText()));
                }
            }
        }

        Criterion[] criterionsArray = new Criterion[0];
        criterionsArray = criterions.toArray(criterionsArray);
        ProfilesService.getInstance().getCurrentProfile().setCriterions(criterionsArray);


        for (int i = 0; i < criterionsArray.length; ++i) {
            for (int j = i + 1; j < criterionsArray.length; ++j) {

                javax.swing.JSlider jSlider;
                javax.swing.JLabel jLabel1;
                javax.swing.JLabel jLabel2;

                jSlider = new javax.swing.JSlider();
                jLabel1 = new javax.swing.JLabel();
                jLabel2 = new javax.swing.JLabel();

                jSlider.setMajorTickSpacing(1);
                jSlider.setMaximum(9);
                jSlider.setMinimum(1);
                jSlider.setMinorTickSpacing(1);
                jSlider.setPaintTicks(true);
                jSlider.setSnapToTicks(true);

                jSlider.setValue(5);

                jSlider.setName(criterionsArray[i].getName() + criterionsArray[j].getName());

                jSlider.setPreferredSize(new Dimension(200, 25));
                jSlider.setMinimumSize(new Dimension(200, 25));
                jSlider.setMaximumSize(new Dimension(200, 25));

                jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel1.setText(criterionsArray[i].getName());
                jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel2.setText(criterionsArray[j].getName());

                JPanel panel = new JPanel();


                panel.add(jLabel1);
                panel.add(jSlider);
                panel.add(jLabel2);
                setCriterionsDialogCriterionPreferencePanel.add(panel);
            }
        }

        setCriterionsDialogCriterionPreferencePanel.repaint();
        setCriterionsDialogCriterionPreferencePanel.revalidate();
    }//GEN-LAST:event_setCriterionsDialogSetValuesButtonActionPerformed

    private void setCriterionsDialogOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCriterionsDialogOkButtonActionPerformed
        // TODO add your handling code here:
        Profile currentProfile = ProfilesService.getInstance().getCurrentProfile();
        Criterion[] criterions = currentProfile.getCriterions();
        Decision[] decisions = currentProfile.getDecisions();
        ComparisonMatrix comparisonMatrix = new ComparisonMatrix(criterions);


        for (int i = 0; i < criterions.length; ++i) {

            for (int j = i + 1; j < criterions.length; ++j) {
                JSlider slider = (JSlider) findComponentByName(criterions[i].getName() + criterions[j].getName(), setCriterionsDialogCriterionPreferencePanel);
                double value;

                if (slider != null) {
                    switch (slider.getValue()) {
                        case 9: {
                            value = 1.0 / 9;
                        }
                        break;

                        case 8: {
                            value = 1.0 / 7;
                        }
                        break;

                        case 7: {
                            value = 1.0 / 5;
                        }
                        break;

                        case 6: {
                            value = 1.0 / 3;
                        }
                        break;

                        case 5: {
                            value = 1.0;
                        }
                        break;

                        case 4: {
                            value = 3.0;
                        }
                        break;

                        case 3: {
                            value = 5.0;
                        }
                        break;

                        case 2: {
                            value = 7.0;
                        }
                        break;

                        case 1: {
                            value = 9.0;
                        }
                        break;

                        default: {
                            value = 1.0;
                        }
                        break;
                    }

                    comparisonMatrix.setComparisonValue(criterions[i], criterions[j], value);
                }
            }
        }
        currentProfile.setCriterionsPreferences(comparisonMatrix);


        for (Element criterion : criterions) {
            comparisonMatrix = new ComparisonMatrix(decisions);

            for (int i = 0; i < decisions.length; ++i) {
                for (int j = i + 1; j < decisions.length; ++j) {
                    comparisonMatrix.setComparisonValue(decisions[i], decisions[j], 1);
                }
            }

            currentProfile.setDecisionsPreferences((Criterion) criterion, comparisonMatrix);
        }

        setComparisonPairs();
        comparePair(0);

        setCriterionsDialog.dispose();
    }//GEN-LAST:event_setCriterionsDialogOkButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        //saveAction();
        previousButton.setEnabled(true);
        comparePair(currentPair + 1);
        if (currentPair < comparisonPairs.length - 1) {
            nextButton.setEnabled(true);
        } else {
            nextButton.setEnabled(false);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        //saveAction();        
        nextButton.setEnabled(true);
        comparePair(currentPair - 1);
        if (currentPair > 0) {
            previousButton.setEnabled(true);
        } else {
            previousButton.setEnabled(false);
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void createUserDialogOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserDialogOkButtonActionPerformed
        // TODO add your handling code here:
        if (createUserDialogUserNameField.getText().length() != 0) {

            try {
                ProfilesService.getInstance().createProfile(new Profile(createUserDialogUserNameField.getText()));

                //                            try {
                //                                ProfilesService.getInstance().loadProfile(new Profile(createUserDialogUserNameField.getText()).);
                //                            } catch (UserAuthenticationException ex) {
                //                            }

                Profile profile = ProfilesService.getInstance().getCurrentProfile();

                //CRITERIONS MATRIX
                Criterion[] criterions = new Criterion[3];
                criterions[0] = new Criterion("Nadwozie");
                criterions[1] = new Criterion("Kolor");
                criterions[2] = new Criterion("Segment");
                ComparisonMatrix criterionsMatrix = new ComparisonMatrix(criterions);
                criterionsMatrix.setComparisonValue(criterions[1], criterions[0], 3);
                criterionsMatrix.setComparisonValue(criterions[2], criterions[0], 5);
                criterionsMatrix.setComparisonValue(criterions[2], criterions[1], 3);
                profile.setCriterionsPreferences(criterionsMatrix);
                profile.setCriterions(criterions);

                //DECISIONS
                Decision[] decisions = new Decision[0];
                decisions = (Decision[]) DecisionsController.getInstance().loadDecisions(ProfilesService.getInstance().getCurrentProfile().getDecisionsFolder()).toArray(decisions);

                profile.setDecisions(decisions);

                for (Element criterion : criterions) {
                    ComparisonMatrix comparisonMatrix = new ComparisonMatrix(decisions);

                    for (int i = 0; i < decisions.length; ++i) {
                        for (int j = i + 1; j < decisions.length; ++j) {
                            comparisonMatrix.setComparisonValue(decisions[i], decisions[j], 1);
                        }
                    }

                    profile.setDecisionsPreferences((Criterion) criterion, comparisonMatrix);
                }

                setComparisonPairs();
                comparePair(0);

                saveSessionMenuItem.setEnabled(true);
                loadSessionMenuItem.setEnabled(true);
                setCriterionsMenuItem.setEnabled(true);
                createUserDialogUserNameField.setText("");
                calculateMenuItem.setEnabled(true);

                try {
                    ProfilesService.getInstance().saveProfile();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }

                createProfileDialog.dispose();
            } catch (UserRegistrationException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                createUserDialogUserNameLabel.setForeground(new java.awt.Color(255, 0, 0));
            }
        } else {
            createUserDialogUserNameLabel.setForeground(new java.awt.Color(255, 0, 0));
        }
    }//GEN-LAST:event_createUserDialogOkButtonActionPerformed

    private void createUserDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserDialogCancelButtonActionPerformed
        // TODO add your handling code here:
        createProfileDialog.dispose();
        createUserDialogUserNameField.setText("");
    }//GEN-LAST:event_createUserDialogCancelButtonActionPerformed

    private Component findComponentByName(String name, JPanel panel) {
        Component component = null;

        for (Component element : panel.getComponents()) {
            if (name.equals(element.getName())) {
                component = element;
            }else if(element instanceof JPanel){
                Component c = findComponentByName(name, (JPanel) element);
                component = c != null ? c : component ;
            }
        }

        return component;
    }
    
    
    private Point[] comparisonPairs;
    private int currentPair;
    private ComparisonMatrix[] comparisonMatrixes;

    private void setComparisonPairs() {
        currentPair = 0;
        this.comparisonPairs = new Point[0];
        Decision[] decisions = ProfilesService.getInstance().getCurrentProfile().getDecisions();
        Criterion[] criterions = ProfilesService.getInstance().getCurrentProfile().getCriterions();
        comparisonMatrixes = new ComparisonMatrix[criterions.length];
        List<Point> comparisonPairs = new LinkedList<>();

        for (int k = 0; k < criterions.length; ++k) {
            Criterion criterion = criterions[k];
            comparisonMatrixes[k] = ProfilesService.getInstance().getCurrentProfile().getDecisionsPreferences(criterion) == null ? new ComparisonMatrix(decisions) : ProfilesService.getInstance().getCurrentProfile().getDecisionsPreferences(criterion);
        }

        for (int i = 0; i < decisions.length; ++i) {
            for (int j = i + 1; j < decisions.length; ++j) {
                comparisonPairs.add(new Point(i, j));
            }
        }

        this.comparisonPairs = (Point[]) comparisonPairs.toArray(this.comparisonPairs);
    }

    private void comparePair(int index) {
        comparisonPanel.removeAll();
        currentPair = index;
        try {
            leftImagePanel.setImage(ProfilesService.getInstance().getCurrentProfile().getDecisions()[(int) comparisonPairs[index].getX()].getImage());
            leftImagePanel.repaint();
            rightImagePanel.setImage(ProfilesService.getInstance().getCurrentProfile().getDecisions()[(int) comparisonPairs[index].getY()].getImage());
            rightImagePanel.repaint();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < ProfilesService.getInstance().getCurrentProfile().getCriterions().length; ++i) {
            Criterion criterion = ProfilesService.getInstance().getCurrentProfile().getCriterions()[i];

            javax.swing.JSlider jSlider;
            javax.swing.JLabel jLabel;

            jSlider = new javax.swing.JSlider();
            jLabel = new javax.swing.JLabel();

            jSlider.setMajorTickSpacing(1);
            jSlider.setMaximum(9);
            jSlider.setMinimum(1);
            jSlider.setMinorTickSpacing(1);
            jSlider.setPaintTicks(true);
            jSlider.setSnapToTicks(true);
            jSlider.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    saveAction();
                }
            });

            double value = comparisonMatrixes[i].getValues().get((int) comparisonPairs[index].getX(), (int) comparisonPairs[index].getY());

            if (value <= 1. / 9) {
                jSlider.setValue(9);
            } else if (value <= 1. / 7) {
                jSlider.setValue(8);
            } else if (value <= 1. / 5) {
                jSlider.setValue(7);
            } else if (value <= 1. / 3) {
                jSlider.setValue(6);
            } else if (value <= 1.) {
                jSlider.setValue(5);
            } else if (value <= 3.) {
                jSlider.setValue(4);
            } else if (value <= 5.) {
                jSlider.setValue(3);
            } else if (value <= 7.) {
                jSlider.setValue(2);
            } else if (value <= 9.) {
                jSlider.setValue(1);
            }

            jSlider.setName(criterion.getName() + (int) comparisonPairs[index].getX() + (int) comparisonPairs[index].getY());

            jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel.setText(criterion.getName());

            comparisonPanel.add(jLabel);
            comparisonPanel.add(jSlider);
            comparisonPanel.repaint();
            comparisonPanel.revalidate();
        }
    }

    private void saveAction() {
        // TODO add your handling code here:
        Criterion[] criterions = ProfilesService.getInstance().getCurrentProfile().getCriterions();
        Decision[] decisions = ProfilesService.getInstance().getCurrentProfile().getDecisions();
        JSlider slider;
        double value;

        for (int i = 0; i < criterions.length; ++i) {
            slider = (JSlider) findComponentByName(criterions[i].getName() + (int) comparisonPairs[currentPair].getX() + (int) comparisonPairs[currentPair].getY(), comparisonPanel);

            if (slider != null) {
                switch (slider.getValue()) {
                    case 9: {
                        value = 1.0 / 9;
                    }
                    break;

                    case 8: {
                        value = 1.0 / 7;
                    }
                    break;

                    case 7: {
                        value = 1.0 / 5;
                    }
                    break;

                    case 6: {
                        value = 1.0 / 3;
                    }
                    break;

                    case 5: {
                        value = 1.0;
                    }
                    break;

                    case 4: {
                        value = 3.0;
                    }
                    break;

                    case 3: {
                        value = 5.0;
                    }
                    break;

                    case 2: {
                        value = 7.0;
                    }
                    break;

                    case 1: {
                        value = 9.0;
                    }
                    break;

                    default: {
                        value = 1.0;
                    }
                    break;
                }

                comparisonMatrixes[i].setComparisonValue(decisions[(int) comparisonPairs[currentPair].getX()], decisions[(int) comparisonPairs[currentPair].getY()], value);
                ProfilesService.getInstance().getCurrentProfile().getDecisionsPreferences(criterions[i]).setComparisonValue(decisions[(int) comparisonPairs[currentPair].getX()], decisions[(int) comparisonPairs[currentPair].getY()], value);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void openWindow() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem calculateMenuItem;
    private javax.swing.JPanel comparisonPanel;
    private javax.swing.JDialog createProfileDialog;
    private javax.swing.JButton createUserDialogCancelButton;
    private javax.swing.JButton createUserDialogOkButton;
    private javax.swing.JTextField createUserDialogUserNameField;
    private javax.swing.JLabel createUserDialogUserNameLabel;
    private javax.swing.JMenuItem createUserMenuItem;
    private javax.swing.JMenuItem exitMenuOption;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private core.v.ImagePanel leftImagePanel;
    private javax.swing.JDialog loadProfileDialog;
    private javax.swing.JMenuItem loadSessionMenuItem;
    private javax.swing.JButton logInDialogCancelButton;
    private javax.swing.JButton logInDialogOkButton;
    private javax.swing.JMenuItem logInOutMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JButton previousButton;
    private javax.swing.JDialog resultDialog;
    private javax.swing.JPanel resultDialogInnerPanel;
    private core.v.ImagePanel rightImagePanel;
    private javax.swing.JMenuItem saveSessionMenuItem;
    private javax.swing.JDialog setCriterionsDialog;
    private javax.swing.JButton setCriterionsDialogAddCriterionButton;
    private javax.swing.JButton setCriterionsDialogCancelButton;
    private javax.swing.JPanel setCriterionsDialogCriterionPreferencePanel;
    private javax.swing.JPanel setCriterionsDialogCriterionsPanel;
    private javax.swing.JButton setCriterionsDialogOkButton;
    private javax.swing.JButton setCriterionsDialogSetValuesButton;
    private javax.swing.JMenuItem setCriterionsMenuItem;
    private javax.swing.JMenu userMenu;
    private javax.swing.JPopupMenu.Separator userMenuSeparator;
    // End of variables declaration//GEN-END:variables
}
